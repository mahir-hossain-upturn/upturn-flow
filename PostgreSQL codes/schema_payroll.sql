CREATE TABLE IF NOT EXISTS payroll.salary_component ( -- this assumes that fixed and gross components remain the same for all employees in the company
	psc_id SERIAL PRIMARY KEY,
	component_name VARCHAR(50) NOT NULL, -- verify with Income Tax Manual
	CHECK(component_name IN('Basic Salary','Home Rent Allowance','Festival Bonus','Car Maintenance Allowance','Mobile Bill','Entertainment Allowance','Convenyance Allowance','Overtime Pay','Lunch Subsidy','Employee contribution to PF')),
	is_fixed BOOLEAN DEFAULT TRUE, -- if not fixed, then variable
	description TEXT,
	company INTEGER REFERENCES company.company(company_id)
);

CREATE TABLE IF NOT EXISTS payroll.employee_f_salary (
	pefs_id SERIAL PRIMARY KEY,
	employee INTEGER REFERENCES employee.employee(employee_id),
	salary_component INTEGER REFERENCES payroll.salary_component(psc_id),
	effective_from DATE NOT NULL,
	effective_till DATE,
	amount DECIMAL(10,2) NOT NULL,
	is_active BOOLEAN DEFAULT TRUE NOT NULL, -- this component hits / impacts the payslip of the employee 
	is_current BOOLEAN DEFAULT TRUE, -- current means will be paid now; later means to be paid later like Provident Fund 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	updated_at TIMESTAMP, -- on update
	company INTEGER REFERENCES company.company(company_id) NOT NULL
);

CREATE TABLE IF NOT EXISTS payroll.employee_v_salary (
	pevs_id SERIAL PRIMARY KEY,
	employee INTEGER REFERENCES employee.employee(employee_id),
	salary_component INTEGER REFERENCES payroll.salary_component(psc_id),
	amount DECIMAL(10,2) NOT NULL,
	payment_month DATE NOT NULL, -- record the month on which it is going to be hit the payslip
	is_current BOOLEAN DEFAULT TRUE, -- some portion of variable pay can be held back like Profit Share, this gets accumulated over the years
	remark VARCHAR(200), -- write down the occasion like Profit Share, Festival Bonus, Commission
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	updated_at TIMESTAMP,
	company INTEGER REFERENCES company.company(company_id) NOT NULL
);

CREATE TABLE IF NOT EXISTS payroll.employee_salary_record (
	pesr_id SERIAL PRIMARY KEY,
	employee INTEGER REFERENCES employee.employee(employee_id),
	which_month DATE NOT NULL, -- format the month from front-end UI
	which_year DATE NOT NULL, -- format the year from front-end UI
	gross_salary INT NOT NULL, -- Gross Salary = f_salary (c+l) + v_salary (c+l)
	tds INT NOT NULL, -- Tax Deductible at source
	net_salary INT NOT NULL, -- Net Payable Salary / Net Receipt this month = f_salary(c) + v_salary(c) - TDS
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, -- auto generated by the last week of the month
	updated_at TIMESTAMP,
	approved_by INTEGER REFERENCES employee.employee(employee_id) NOT NULL,
	company INTEGER REFERENCES company.company(company_id) NOT NULL
);

CREATE TABLE IF NOT EXISTS payroll.disbursement (
	pd_id SERIAL PRIMARY KEY,
	employee INTEGER REFERENCES employee.employee(employee_id) NOT NULL,
	salary_record INTEGER REFERENCES payroll.employee_salary_record(pesr_id) NOT NULL,
	is_disbursed BOOLEAN DEFAULT TRUE NOT NULL,
	transaction_date DATE NOT NULL,
	payment_method INTEGER REFERENCES transaction.payment_method(pm_id),
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	updated_at TIMESTAMP,
	company INTEGER REFERENCES company.company(company_id) NOT NULL
);

CREATE TABLE IF NOT EXISTS payroll.salary_accumulation ( -- if is_current = FALSE (Fixed + Variable), the amount gets accumulated over the years || Automatically creates a record when f & v (l) becomes due
	psa_id SERIAL PRIMARY KEY,
	variable_salary INTEGER REFERENCES payroll.employee_v_salary(pevs_id) NOT NULL,
	fixed_salalry INTEGER REFERENCES payroll.employee_f_salary(pefs_id) NOT NULL,
	net_balance NOT NULL, -- accumulation of f_salary(l) & v_salary(l) till date
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	updated_at TIMESTAMP,
	employee INTEGER REFERENCES employee.employee(employee_id) NOT NULL,
	company INTEGER REFERENCES company.company(company_id) NOT NULL
);